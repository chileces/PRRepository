/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.model.PersistedInvoiceLine;
import com.liferay.training.model.PersistedInvoiceLineModel;
import com.liferay.training.model.PersistedInvoiceLineSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PersistedInvoiceLine service. Represents a row in the &quot;CustomInvoice_PersistedInvoiceLine&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersistedInvoiceLineModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersistedInvoiceLineImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersistedInvoiceLineImpl
 * @generated
 */
@JSON(strict = true)
public class PersistedInvoiceLineModelImpl
	extends BaseModelImpl<PersistedInvoiceLine>
	implements PersistedInvoiceLineModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persisted invoice line model instance should use the <code>PersistedInvoiceLine</code> interface instead.
	 */
	public static final String TABLE_NAME =
		"CustomInvoice_PersistedInvoiceLine";

	public static final Object[][] TABLE_COLUMNS = {
		{"persistedInvoiceLineId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"persistedInvoiceId", Types.BIGINT},
		{"price", Types.DOUBLE}, {"quantity", Types.INTEGER},
		{"discountPercent", Types.DOUBLE}, {"itemCode", Types.VARCHAR},
		{"lineNum", Types.INTEGER}, {"lineTotal", Types.DOUBLE},
		{"salesOrder", Types.BIGINT}, {"salesOrderlineNum", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("persistedInvoiceLineId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("persistedInvoiceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("price", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("quantity", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("discountPercent", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("itemCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lineNum", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lineTotal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("salesOrder", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salesOrderlineNum", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CustomInvoice_PersistedInvoiceLine (persistedInvoiceLineId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,persistedInvoiceId LONG,price DOUBLE,quantity INTEGER,discountPercent DOUBLE,itemCode VARCHAR(75) null,lineNum INTEGER,lineTotal DOUBLE,salesOrder LONG,salesOrderlineNum INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table CustomInvoice_PersistedInvoiceLine";

	public static final String ORDER_BY_JPQL =
		" ORDER BY persistedInvoiceLine.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CustomInvoice_PersistedInvoiceLine.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PERSISTEDINVOICEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PersistedInvoiceLine toModel(
		PersistedInvoiceLineSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		PersistedInvoiceLine model = new PersistedInvoiceLineImpl();

		model.setPersistedInvoiceLineId(soapModel.getPersistedInvoiceLineId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setPersistedInvoiceId(soapModel.getPersistedInvoiceId());
		model.setPrice(soapModel.getPrice());
		model.setQuantity(soapModel.getQuantity());
		model.setDiscountPercent(soapModel.getDiscountPercent());
		model.setItemCode(soapModel.getItemCode());
		model.setLineNum(soapModel.getLineNum());
		model.setLineTotal(soapModel.getLineTotal());
		model.setSalesOrder(soapModel.getSalesOrder());
		model.setSalesOrderlineNum(soapModel.getSalesOrderlineNum());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PersistedInvoiceLine> toModels(
		PersistedInvoiceLineSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<PersistedInvoiceLine> models = new ArrayList<PersistedInvoiceLine>(
			soapModels.length);

		for (PersistedInvoiceLineSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PersistedInvoiceLineModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _persistedInvoiceLineId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersistedInvoiceLineId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _persistedInvoiceLineId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PersistedInvoiceLine.class;
	}

	@Override
	public String getModelClassName() {
		return PersistedInvoiceLine.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PersistedInvoiceLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PersistedInvoiceLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedInvoiceLine, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PersistedInvoiceLine)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PersistedInvoiceLine, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PersistedInvoiceLine, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PersistedInvoiceLine)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PersistedInvoiceLine, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PersistedInvoiceLine, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PersistedInvoiceLine>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PersistedInvoiceLine.class.getClassLoader(),
			PersistedInvoiceLine.class, ModelWrapper.class);

		try {
			Constructor<PersistedInvoiceLine> constructor =
				(Constructor<PersistedInvoiceLine>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PersistedInvoiceLine, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PersistedInvoiceLine, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PersistedInvoiceLine, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<PersistedInvoiceLine, Object>>();
		Map<String, BiConsumer<PersistedInvoiceLine, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<PersistedInvoiceLine, ?>>();

		attributeGetterFunctions.put(
			"persistedInvoiceLineId",
			PersistedInvoiceLine::getPersistedInvoiceLineId);
		attributeSetterBiConsumers.put(
			"persistedInvoiceLineId",
			(BiConsumer<PersistedInvoiceLine, Long>)
				PersistedInvoiceLine::setPersistedInvoiceLineId);
		attributeGetterFunctions.put(
			"groupId", PersistedInvoiceLine::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<PersistedInvoiceLine, Long>)
				PersistedInvoiceLine::setGroupId);
		attributeGetterFunctions.put(
			"companyId", PersistedInvoiceLine::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PersistedInvoiceLine, Long>)
				PersistedInvoiceLine::setCompanyId);
		attributeGetterFunctions.put("userId", PersistedInvoiceLine::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<PersistedInvoiceLine, Long>)
				PersistedInvoiceLine::setUserId);
		attributeGetterFunctions.put(
			"userName", PersistedInvoiceLine::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<PersistedInvoiceLine, String>)
				PersistedInvoiceLine::setUserName);
		attributeGetterFunctions.put(
			"createDate", PersistedInvoiceLine::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PersistedInvoiceLine, Date>)
				PersistedInvoiceLine::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PersistedInvoiceLine::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PersistedInvoiceLine, Date>)
				PersistedInvoiceLine::setModifiedDate);
		attributeGetterFunctions.put(
			"persistedInvoiceId", PersistedInvoiceLine::getPersistedInvoiceId);
		attributeSetterBiConsumers.put(
			"persistedInvoiceId",
			(BiConsumer<PersistedInvoiceLine, Long>)
				PersistedInvoiceLine::setPersistedInvoiceId);
		attributeGetterFunctions.put("price", PersistedInvoiceLine::getPrice);
		attributeSetterBiConsumers.put(
			"price",
			(BiConsumer<PersistedInvoiceLine, Double>)
				PersistedInvoiceLine::setPrice);
		attributeGetterFunctions.put(
			"quantity", PersistedInvoiceLine::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity",
			(BiConsumer<PersistedInvoiceLine, Integer>)
				PersistedInvoiceLine::setQuantity);
		attributeGetterFunctions.put(
			"discountPercent", PersistedInvoiceLine::getDiscountPercent);
		attributeSetterBiConsumers.put(
			"discountPercent",
			(BiConsumer<PersistedInvoiceLine, Double>)
				PersistedInvoiceLine::setDiscountPercent);
		attributeGetterFunctions.put(
			"itemCode", PersistedInvoiceLine::getItemCode);
		attributeSetterBiConsumers.put(
			"itemCode",
			(BiConsumer<PersistedInvoiceLine, String>)
				PersistedInvoiceLine::setItemCode);
		attributeGetterFunctions.put(
			"lineNum", PersistedInvoiceLine::getLineNum);
		attributeSetterBiConsumers.put(
			"lineNum",
			(BiConsumer<PersistedInvoiceLine, Integer>)
				PersistedInvoiceLine::setLineNum);
		attributeGetterFunctions.put(
			"lineTotal", PersistedInvoiceLine::getLineTotal);
		attributeSetterBiConsumers.put(
			"lineTotal",
			(BiConsumer<PersistedInvoiceLine, Double>)
				PersistedInvoiceLine::setLineTotal);
		attributeGetterFunctions.put(
			"salesOrder", PersistedInvoiceLine::getSalesOrder);
		attributeSetterBiConsumers.put(
			"salesOrder",
			(BiConsumer<PersistedInvoiceLine, Long>)
				PersistedInvoiceLine::setSalesOrder);
		attributeGetterFunctions.put(
			"salesOrderlineNum", PersistedInvoiceLine::getSalesOrderlineNum);
		attributeSetterBiConsumers.put(
			"salesOrderlineNum",
			(BiConsumer<PersistedInvoiceLine, Integer>)
				PersistedInvoiceLine::setSalesOrderlineNum);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getPersistedInvoiceLineId() {
		return _persistedInvoiceLineId;
	}

	@Override
	public void setPersistedInvoiceLineId(long persistedInvoiceLineId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_persistedInvoiceLineId = persistedInvoiceLineId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getPersistedInvoiceId() {
		return _persistedInvoiceId;
	}

	@Override
	public void setPersistedInvoiceId(long persistedInvoiceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_persistedInvoiceId = persistedInvoiceId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPersistedInvoiceId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("persistedInvoiceId"));
	}

	@JSON
	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_price = price;
	}

	@JSON
	@Override
	public Integer getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(Integer quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public double getDiscountPercent() {
		return _discountPercent;
	}

	@Override
	public void setDiscountPercent(double discountPercent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_discountPercent = discountPercent;
	}

	@JSON
	@Override
	public String getItemCode() {
		if (_itemCode == null) {
			return "";
		}
		else {
			return _itemCode;
		}
	}

	@Override
	public void setItemCode(String itemCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_itemCode = itemCode;
	}

	@JSON
	@Override
	public Integer getLineNum() {
		return _lineNum;
	}

	@Override
	public void setLineNum(Integer lineNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lineNum = lineNum;
	}

	@JSON
	@Override
	public double getLineTotal() {
		return _lineTotal;
	}

	@Override
	public void setLineTotal(double lineTotal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lineTotal = lineTotal;
	}

	@JSON
	@Override
	public long getSalesOrder() {
		return _salesOrder;
	}

	@Override
	public void setSalesOrder(long salesOrder) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesOrder = salesOrder;
	}

	@JSON
	@Override
	public Integer getSalesOrderlineNum() {
		return _salesOrderlineNum;
	}

	@Override
	public void setSalesOrderlineNum(Integer salesOrderlineNum) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesOrderlineNum = salesOrderlineNum;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PersistedInvoiceLine.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PersistedInvoiceLine toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PersistedInvoiceLine>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersistedInvoiceLineImpl persistedInvoiceLineImpl =
			new PersistedInvoiceLineImpl();

		persistedInvoiceLineImpl.setPersistedInvoiceLineId(
			getPersistedInvoiceLineId());
		persistedInvoiceLineImpl.setGroupId(getGroupId());
		persistedInvoiceLineImpl.setCompanyId(getCompanyId());
		persistedInvoiceLineImpl.setUserId(getUserId());
		persistedInvoiceLineImpl.setUserName(getUserName());
		persistedInvoiceLineImpl.setCreateDate(getCreateDate());
		persistedInvoiceLineImpl.setModifiedDate(getModifiedDate());
		persistedInvoiceLineImpl.setPersistedInvoiceId(getPersistedInvoiceId());
		persistedInvoiceLineImpl.setPrice(getPrice());
		persistedInvoiceLineImpl.setQuantity(getQuantity());
		persistedInvoiceLineImpl.setDiscountPercent(getDiscountPercent());
		persistedInvoiceLineImpl.setItemCode(getItemCode());
		persistedInvoiceLineImpl.setLineNum(getLineNum());
		persistedInvoiceLineImpl.setLineTotal(getLineTotal());
		persistedInvoiceLineImpl.setSalesOrder(getSalesOrder());
		persistedInvoiceLineImpl.setSalesOrderlineNum(getSalesOrderlineNum());

		persistedInvoiceLineImpl.resetOriginalValues();

		return persistedInvoiceLineImpl;
	}

	@Override
	public int compareTo(PersistedInvoiceLine persistedInvoiceLine) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), persistedInvoiceLine.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PersistedInvoiceLine)) {
			return false;
		}

		PersistedInvoiceLine persistedInvoiceLine =
			(PersistedInvoiceLine)object;

		long primaryKey = persistedInvoiceLine.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PersistedInvoiceLine> toCacheModel() {
		PersistedInvoiceLineCacheModel persistedInvoiceLineCacheModel =
			new PersistedInvoiceLineCacheModel();

		persistedInvoiceLineCacheModel.persistedInvoiceLineId =
			getPersistedInvoiceLineId();

		persistedInvoiceLineCacheModel.groupId = getGroupId();

		persistedInvoiceLineCacheModel.companyId = getCompanyId();

		persistedInvoiceLineCacheModel.userId = getUserId();

		persistedInvoiceLineCacheModel.userName = getUserName();

		String userName = persistedInvoiceLineCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			persistedInvoiceLineCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			persistedInvoiceLineCacheModel.createDate = createDate.getTime();
		}
		else {
			persistedInvoiceLineCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			persistedInvoiceLineCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			persistedInvoiceLineCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		persistedInvoiceLineCacheModel.persistedInvoiceId =
			getPersistedInvoiceId();

		persistedInvoiceLineCacheModel.price = getPrice();

		Integer quantity = getQuantity();

		if (quantity != null) {
			persistedInvoiceLineCacheModel.quantity = quantity;
		}

		persistedInvoiceLineCacheModel.discountPercent = getDiscountPercent();

		persistedInvoiceLineCacheModel.itemCode = getItemCode();

		String itemCode = persistedInvoiceLineCacheModel.itemCode;

		if ((itemCode != null) && (itemCode.length() == 0)) {
			persistedInvoiceLineCacheModel.itemCode = null;
		}

		Integer lineNum = getLineNum();

		if (lineNum != null) {
			persistedInvoiceLineCacheModel.lineNum = lineNum;
		}

		persistedInvoiceLineCacheModel.lineTotal = getLineTotal();

		persistedInvoiceLineCacheModel.salesOrder = getSalesOrder();

		Integer salesOrderlineNum = getSalesOrderlineNum();

		if (salesOrderlineNum != null) {
			persistedInvoiceLineCacheModel.salesOrderlineNum =
				salesOrderlineNum;
		}

		return persistedInvoiceLineCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PersistedInvoiceLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PersistedInvoiceLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedInvoiceLine, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PersistedInvoiceLine)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PersistedInvoiceLine, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PersistedInvoiceLine, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedInvoiceLine, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((PersistedInvoiceLine)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PersistedInvoiceLine>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _persistedInvoiceLineId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _persistedInvoiceId;
	private double _price;
	private Integer _quantity;
	private double _discountPercent;
	private String _itemCode;
	private Integer _lineNum;
	private double _lineTotal;
	private long _salesOrder;
	private Integer _salesOrderlineNum;

	public <T> T getColumnValue(String columnName) {
		Function<PersistedInvoiceLine, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PersistedInvoiceLine)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put(
			"persistedInvoiceLineId", _persistedInvoiceLineId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("persistedInvoiceId", _persistedInvoiceId);
		_columnOriginalValues.put("price", _price);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("discountPercent", _discountPercent);
		_columnOriginalValues.put("itemCode", _itemCode);
		_columnOriginalValues.put("lineNum", _lineNum);
		_columnOriginalValues.put("lineTotal", _lineTotal);
		_columnOriginalValues.put("salesOrder", _salesOrder);
		_columnOriginalValues.put("salesOrderlineNum", _salesOrderlineNum);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("persistedInvoiceLineId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("persistedInvoiceId", 128L);

		columnBitmasks.put("price", 256L);

		columnBitmasks.put("quantity", 512L);

		columnBitmasks.put("discountPercent", 1024L);

		columnBitmasks.put("itemCode", 2048L);

		columnBitmasks.put("lineNum", 4096L);

		columnBitmasks.put("lineTotal", 8192L);

		columnBitmasks.put("salesOrder", 16384L);

		columnBitmasks.put("salesOrderlineNum", 32768L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PersistedInvoiceLine _escapedModel;

}