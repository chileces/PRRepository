/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.training.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.training.model.PersistedInvoice;
import com.liferay.training.model.PersistedInvoiceModel;
import com.liferay.training.model.PersistedInvoiceSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the PersistedInvoice service. Represents a row in the &quot;CustomInvoice_PersistedInvoice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>PersistedInvoiceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersistedInvoiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PersistedInvoiceImpl
 * @generated
 */
@JSON(strict = true)
public class PersistedInvoiceModelImpl
	extends BaseModelImpl<PersistedInvoice> implements PersistedInvoiceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persisted invoice model instance should use the <code>PersistedInvoice</code> interface instead.
	 */
	public static final String TABLE_NAME = "CustomInvoice_PersistedInvoice";

	public static final Object[][] TABLE_COLUMNS = {
		{"persistedInvoiceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"gst", Types.DOUBLE},
		{"cardCode", Types.VARCHAR}, {"cardName", Types.VARCHAR},
		{"carrier", Types.VARCHAR}, {"documentDate", Types.TIMESTAMP},
		{"documentNumber", Types.VARCHAR}, {"documentStatus", Types.VARCHAR},
		{"dueDate", Types.TIMESTAMP}, {"freightAmount", Types.DOUBLE},
		{"invoiceTotal", Types.DOUBLE}, {"commerceAccountId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("persistedInvoiceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gst", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("cardCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cardName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("carrier", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("documentNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("freightAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("invoiceTotal", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("commerceAccountId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table CustomInvoice_PersistedInvoice (persistedInvoiceId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,gst DOUBLE,cardCode VARCHAR(75) null,cardName VARCHAR(75) null,carrier VARCHAR(75) null,documentDate DATE null,documentNumber VARCHAR(75) null,documentStatus VARCHAR(75) null,dueDate DATE null,freightAmount DOUBLE,invoiceTotal DOUBLE,commerceAccountId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table CustomInvoice_PersistedInvoice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY persistedInvoice.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY CustomInvoice_PersistedInvoice.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static PersistedInvoice toModel(PersistedInvoiceSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		PersistedInvoice model = new PersistedInvoiceImpl();

		model.setPersistedInvoiceId(soapModel.getPersistedInvoiceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setGst(soapModel.getGst());
		model.setCardCode(soapModel.getCardCode());
		model.setCardName(soapModel.getCardName());
		model.setCarrier(soapModel.getCarrier());
		model.setDocumentDate(soapModel.getDocumentDate());
		model.setDocumentNumber(soapModel.getDocumentNumber());
		model.setDocumentStatus(soapModel.getDocumentStatus());
		model.setDueDate(soapModel.getDueDate());
		model.setFreightAmount(soapModel.getFreightAmount());
		model.setInvoiceTotal(soapModel.getInvoiceTotal());
		model.setCommerceAccountId(soapModel.getCommerceAccountId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static List<PersistedInvoice> toModels(
		PersistedInvoiceSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<PersistedInvoice> models = new ArrayList<PersistedInvoice>(
			soapModels.length);

		for (PersistedInvoiceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public PersistedInvoiceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _persistedInvoiceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPersistedInvoiceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _persistedInvoiceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PersistedInvoice.class;
	}

	@Override
	public String getModelClassName() {
		return PersistedInvoice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<PersistedInvoice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<PersistedInvoice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedInvoice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((PersistedInvoice)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<PersistedInvoice, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<PersistedInvoice, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(PersistedInvoice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<PersistedInvoice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<PersistedInvoice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, PersistedInvoice>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			PersistedInvoice.class.getClassLoader(), PersistedInvoice.class,
			ModelWrapper.class);

		try {
			Constructor<PersistedInvoice> constructor =
				(Constructor<PersistedInvoice>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<PersistedInvoice, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<PersistedInvoice, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<PersistedInvoice, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<PersistedInvoice, Object>>();
		Map<String, BiConsumer<PersistedInvoice, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<PersistedInvoice, ?>>();

		attributeGetterFunctions.put(
			"persistedInvoiceId", PersistedInvoice::getPersistedInvoiceId);
		attributeSetterBiConsumers.put(
			"persistedInvoiceId",
			(BiConsumer<PersistedInvoice, Long>)
				PersistedInvoice::setPersistedInvoiceId);
		attributeGetterFunctions.put("groupId", PersistedInvoice::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<PersistedInvoice, Long>)PersistedInvoice::setGroupId);
		attributeGetterFunctions.put(
			"companyId", PersistedInvoice::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<PersistedInvoice, Long>)PersistedInvoice::setCompanyId);
		attributeGetterFunctions.put("userId", PersistedInvoice::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<PersistedInvoice, Long>)PersistedInvoice::setUserId);
		attributeGetterFunctions.put("userName", PersistedInvoice::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<PersistedInvoice, String>)
				PersistedInvoice::setUserName);
		attributeGetterFunctions.put(
			"createDate", PersistedInvoice::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<PersistedInvoice, Date>)
				PersistedInvoice::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", PersistedInvoice::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<PersistedInvoice, Date>)
				PersistedInvoice::setModifiedDate);
		attributeGetterFunctions.put("gst", PersistedInvoice::getGst);
		attributeSetterBiConsumers.put(
			"gst",
			(BiConsumer<PersistedInvoice, Double>)PersistedInvoice::setGst);
		attributeGetterFunctions.put("cardCode", PersistedInvoice::getCardCode);
		attributeSetterBiConsumers.put(
			"cardCode",
			(BiConsumer<PersistedInvoice, String>)
				PersistedInvoice::setCardCode);
		attributeGetterFunctions.put("cardName", PersistedInvoice::getCardName);
		attributeSetterBiConsumers.put(
			"cardName",
			(BiConsumer<PersistedInvoice, String>)
				PersistedInvoice::setCardName);
		attributeGetterFunctions.put("carrier", PersistedInvoice::getCarrier);
		attributeSetterBiConsumers.put(
			"carrier",
			(BiConsumer<PersistedInvoice, String>)PersistedInvoice::setCarrier);
		attributeGetterFunctions.put(
			"documentDate", PersistedInvoice::getDocumentDate);
		attributeSetterBiConsumers.put(
			"documentDate",
			(BiConsumer<PersistedInvoice, Date>)
				PersistedInvoice::setDocumentDate);
		attributeGetterFunctions.put(
			"documentNumber", PersistedInvoice::getDocumentNumber);
		attributeSetterBiConsumers.put(
			"documentNumber",
			(BiConsumer<PersistedInvoice, String>)
				PersistedInvoice::setDocumentNumber);
		attributeGetterFunctions.put(
			"documentStatus", PersistedInvoice::getDocumentStatus);
		attributeSetterBiConsumers.put(
			"documentStatus",
			(BiConsumer<PersistedInvoice, String>)
				PersistedInvoice::setDocumentStatus);
		attributeGetterFunctions.put("dueDate", PersistedInvoice::getDueDate);
		attributeSetterBiConsumers.put(
			"dueDate",
			(BiConsumer<PersistedInvoice, Date>)PersistedInvoice::setDueDate);
		attributeGetterFunctions.put(
			"freightAmount", PersistedInvoice::getFreightAmount);
		attributeSetterBiConsumers.put(
			"freightAmount",
			(BiConsumer<PersistedInvoice, Double>)
				PersistedInvoice::setFreightAmount);
		attributeGetterFunctions.put(
			"invoiceTotal", PersistedInvoice::getInvoiceTotal);
		attributeSetterBiConsumers.put(
			"invoiceTotal",
			(BiConsumer<PersistedInvoice, Double>)
				PersistedInvoice::setInvoiceTotal);
		attributeGetterFunctions.put(
			"commerceAccountId", PersistedInvoice::getCommerceAccountId);
		attributeSetterBiConsumers.put(
			"commerceAccountId",
			(BiConsumer<PersistedInvoice, Long>)
				PersistedInvoice::setCommerceAccountId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getPersistedInvoiceId() {
		return _persistedInvoiceId;
	}

	@Override
	public void setPersistedInvoiceId(long persistedInvoiceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_persistedInvoiceId = persistedInvoiceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public double getGst() {
		return _gst;
	}

	@Override
	public void setGst(double gst) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gst = gst;
	}

	@JSON
	@Override
	public String getCardCode() {
		if (_cardCode == null) {
			return "";
		}
		else {
			return _cardCode;
		}
	}

	@Override
	public void setCardCode(String cardCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cardCode = cardCode;
	}

	@JSON
	@Override
	public String getCardName() {
		if (_cardName == null) {
			return "";
		}
		else {
			return _cardName;
		}
	}

	@Override
	public void setCardName(String cardName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cardName = cardName;
	}

	@JSON
	@Override
	public String getCarrier() {
		if (_carrier == null) {
			return "";
		}
		else {
			return _carrier;
		}
	}

	@Override
	public void setCarrier(String carrier) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carrier = carrier;
	}

	@JSON
	@Override
	public Date getDocumentDate() {
		return _documentDate;
	}

	@Override
	public void setDocumentDate(Date documentDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentDate = documentDate;
	}

	@JSON
	@Override
	public String getDocumentNumber() {
		if (_documentNumber == null) {
			return "";
		}
		else {
			return _documentNumber;
		}
	}

	@Override
	public void setDocumentNumber(String documentNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentNumber = documentNumber;
	}

	@JSON
	@Override
	public String getDocumentStatus() {
		if (_documentStatus == null) {
			return "";
		}
		else {
			return _documentStatus;
		}
	}

	@Override
	public void setDocumentStatus(String documentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentStatus = documentStatus;
	}

	@JSON
	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dueDate = dueDate;
	}

	@JSON
	@Override
	public double getFreightAmount() {
		return _freightAmount;
	}

	@Override
	public void setFreightAmount(double freightAmount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_freightAmount = freightAmount;
	}

	@JSON
	@Override
	public double getInvoiceTotal() {
		return _invoiceTotal;
	}

	@Override
	public void setInvoiceTotal(double invoiceTotal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_invoiceTotal = invoiceTotal;
	}

	@JSON
	@Override
	public long getCommerceAccountId() {
		return _commerceAccountId;
	}

	@Override
	public void setCommerceAccountId(long commerceAccountId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commerceAccountId = commerceAccountId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), PersistedInvoice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PersistedInvoice toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, PersistedInvoice>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersistedInvoiceImpl persistedInvoiceImpl = new PersistedInvoiceImpl();

		persistedInvoiceImpl.setPersistedInvoiceId(getPersistedInvoiceId());
		persistedInvoiceImpl.setGroupId(getGroupId());
		persistedInvoiceImpl.setCompanyId(getCompanyId());
		persistedInvoiceImpl.setUserId(getUserId());
		persistedInvoiceImpl.setUserName(getUserName());
		persistedInvoiceImpl.setCreateDate(getCreateDate());
		persistedInvoiceImpl.setModifiedDate(getModifiedDate());
		persistedInvoiceImpl.setGst(getGst());
		persistedInvoiceImpl.setCardCode(getCardCode());
		persistedInvoiceImpl.setCardName(getCardName());
		persistedInvoiceImpl.setCarrier(getCarrier());
		persistedInvoiceImpl.setDocumentDate(getDocumentDate());
		persistedInvoiceImpl.setDocumentNumber(getDocumentNumber());
		persistedInvoiceImpl.setDocumentStatus(getDocumentStatus());
		persistedInvoiceImpl.setDueDate(getDueDate());
		persistedInvoiceImpl.setFreightAmount(getFreightAmount());
		persistedInvoiceImpl.setInvoiceTotal(getInvoiceTotal());
		persistedInvoiceImpl.setCommerceAccountId(getCommerceAccountId());

		persistedInvoiceImpl.resetOriginalValues();

		return persistedInvoiceImpl;
	}

	@Override
	public int compareTo(PersistedInvoice persistedInvoice) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), persistedInvoice.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof PersistedInvoice)) {
			return false;
		}

		PersistedInvoice persistedInvoice = (PersistedInvoice)object;

		long primaryKey = persistedInvoice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<PersistedInvoice> toCacheModel() {
		PersistedInvoiceCacheModel persistedInvoiceCacheModel =
			new PersistedInvoiceCacheModel();

		persistedInvoiceCacheModel.persistedInvoiceId = getPersistedInvoiceId();

		persistedInvoiceCacheModel.groupId = getGroupId();

		persistedInvoiceCacheModel.companyId = getCompanyId();

		persistedInvoiceCacheModel.userId = getUserId();

		persistedInvoiceCacheModel.userName = getUserName();

		String userName = persistedInvoiceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			persistedInvoiceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			persistedInvoiceCacheModel.createDate = createDate.getTime();
		}
		else {
			persistedInvoiceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			persistedInvoiceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			persistedInvoiceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		persistedInvoiceCacheModel.gst = getGst();

		persistedInvoiceCacheModel.cardCode = getCardCode();

		String cardCode = persistedInvoiceCacheModel.cardCode;

		if ((cardCode != null) && (cardCode.length() == 0)) {
			persistedInvoiceCacheModel.cardCode = null;
		}

		persistedInvoiceCacheModel.cardName = getCardName();

		String cardName = persistedInvoiceCacheModel.cardName;

		if ((cardName != null) && (cardName.length() == 0)) {
			persistedInvoiceCacheModel.cardName = null;
		}

		persistedInvoiceCacheModel.carrier = getCarrier();

		String carrier = persistedInvoiceCacheModel.carrier;

		if ((carrier != null) && (carrier.length() == 0)) {
			persistedInvoiceCacheModel.carrier = null;
		}

		Date documentDate = getDocumentDate();

		if (documentDate != null) {
			persistedInvoiceCacheModel.documentDate = documentDate.getTime();
		}
		else {
			persistedInvoiceCacheModel.documentDate = Long.MIN_VALUE;
		}

		persistedInvoiceCacheModel.documentNumber = getDocumentNumber();

		String documentNumber = persistedInvoiceCacheModel.documentNumber;

		if ((documentNumber != null) && (documentNumber.length() == 0)) {
			persistedInvoiceCacheModel.documentNumber = null;
		}

		persistedInvoiceCacheModel.documentStatus = getDocumentStatus();

		String documentStatus = persistedInvoiceCacheModel.documentStatus;

		if ((documentStatus != null) && (documentStatus.length() == 0)) {
			persistedInvoiceCacheModel.documentStatus = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			persistedInvoiceCacheModel.dueDate = dueDate.getTime();
		}
		else {
			persistedInvoiceCacheModel.dueDate = Long.MIN_VALUE;
		}

		persistedInvoiceCacheModel.freightAmount = getFreightAmount();

		persistedInvoiceCacheModel.invoiceTotal = getInvoiceTotal();

		persistedInvoiceCacheModel.commerceAccountId = getCommerceAccountId();

		return persistedInvoiceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<PersistedInvoice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<PersistedInvoice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedInvoice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(PersistedInvoice)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<PersistedInvoice, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<PersistedInvoice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<PersistedInvoice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((PersistedInvoice)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, PersistedInvoice>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private long _persistedInvoiceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private double _gst;
	private String _cardCode;
	private String _cardName;
	private String _carrier;
	private Date _documentDate;
	private String _documentNumber;
	private String _documentStatus;
	private Date _dueDate;
	private double _freightAmount;
	private double _invoiceTotal;
	private long _commerceAccountId;

	public <T> T getColumnValue(String columnName) {
		Function<PersistedInvoice, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((PersistedInvoice)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("persistedInvoiceId", _persistedInvoiceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("gst", _gst);
		_columnOriginalValues.put("cardCode", _cardCode);
		_columnOriginalValues.put("cardName", _cardName);
		_columnOriginalValues.put("carrier", _carrier);
		_columnOriginalValues.put("documentDate", _documentDate);
		_columnOriginalValues.put("documentNumber", _documentNumber);
		_columnOriginalValues.put("documentStatus", _documentStatus);
		_columnOriginalValues.put("dueDate", _dueDate);
		_columnOriginalValues.put("freightAmount", _freightAmount);
		_columnOriginalValues.put("invoiceTotal", _invoiceTotal);
		_columnOriginalValues.put("commerceAccountId", _commerceAccountId);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("persistedInvoiceId", 1L);

		columnBitmasks.put("groupId", 2L);

		columnBitmasks.put("companyId", 4L);

		columnBitmasks.put("userId", 8L);

		columnBitmasks.put("userName", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("gst", 128L);

		columnBitmasks.put("cardCode", 256L);

		columnBitmasks.put("cardName", 512L);

		columnBitmasks.put("carrier", 1024L);

		columnBitmasks.put("documentDate", 2048L);

		columnBitmasks.put("documentNumber", 4096L);

		columnBitmasks.put("documentStatus", 8192L);

		columnBitmasks.put("dueDate", 16384L);

		columnBitmasks.put("freightAmount", 32768L);

		columnBitmasks.put("invoiceTotal", 65536L);

		columnBitmasks.put("commerceAccountId", 131072L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private PersistedInvoice _escapedModel;

}